# This Python file uses the following encoding: utf-8
from ftplib import FTP
from getmyad.config.social_ads import social_ads
from getmyad.lib.helpers import progressBar
from getmyad.lib.admaker_validator import validate_admaker
from getmyad.lib.template_convertor import js2mako
from getmyad.model import mq
from pylons import config, app_globals
import mako.template
from uuid import uuid1
import StringIO, codecs
import datetime
import logging
import re
from urlparse import urlparse
import urllib2
import json
from binascii import crc32

from slimit import minifier


class Informer:
    """ Рекламный информер (он же рекламный скрипт, рекламная выгрузка) """

    def __init__(self):
        self.guid = None
        self.guid_int = 0
        self.title = None
        self.admaker = None
        self.css = None
        self.css_banner = None
        self.user_login = None
        self.non_relevant = None
        self.domain = None
        self.height = None
        self.width = None
        self.height_banner = None
        self.width_banner = None
        self.cost = None
        self.range_short_term = None
        self.range_long_term = None
        self.range_context = None
        self.range_search = None
        self.range_retargeting = None
        self.html_notification = False
        self.plase_branch = True
        self.retargeting_branch = True
        self.auto_reload = 0
        self.db = app_globals.db


    def save(self):
        """ Сохраняет информер, при необходимости создаёт """
        update = {}
        if self.guid:
            self.guid_int = long(crc32(self.guid.encode('utf-8')) & 0xffffffff)
        else:
            self.guid = str(uuid1()).lower()
            self.guid_int = long(crc32(self.guid.encode('utf-8')) & 0xffffffff)
            if not self.user_login:
                raise ValueError('User login must be specified when creating '
                                 'informer!')
            update['user'] = self.user_login
        if self.user_login is not None:
            record = self.db.users.find_one({'login': self.user_login})
            self.range_short_term = float(record.get('range_short_term', (100 / 100.0)))
            update['range_short_term'] = self.range_short_term
            self.range_long_term = float(record.get('range_long_term', (0 / 100.0)))
            update['range_long_term'] = self.range_long_term
            self.range_context = float(record.get('range_context', (0 / 100.0)))
            update['range_context'] = self.range_context
            self.range_search = float(record.get('range_search', (100 / 100.0)))
            update['range_search'] = self.range_search
            self.range_retargeting = float(record.get('range_retargeting', (100 / 100.0)))
            update['retargeting_capacity'] = self.range_retargeting
        else:
            self.range_short_term = (100 / 100.0) 
            self.range_long_term = (0 / 100.0)
            self.range_context = (0 / 100.0)
            self.range_search = (100 / 100.0)
            self.range_retargeting = (100 / 100.0)
            update['user'] = self.user_login
            update['range_short_term'] = self.range_short_term
            update['range_long_term'] = self.range_long_term
            update['range_context'] = self.range_context
            update['range_search'] = self.range_search
            update['retargeting_capacity'] = self.range_retargeting
            
        if self.title:
            update['title'] = self.title
        if self.admaker:
            update['admaker'] = self.admaker
        if self.css:
            update['css'] = self.css
        else:
            update['css'] = self.admaker_options_to_css(self.admaker)
        if self.css_banner:
            update['css_banner'] = self.css_banner
        else:
            update['css_banner'] = self.admaker_options_to_css_banner(self.admaker)
        if self.domain:
            update['domain'] = self.domain
        if self.height:
            update['height'] = self.height
        if self.width:
            update['width'] = self.width
        if self.height_banner:
            update['height_banner'] = self.height_banner
        if self.width_banner:
            update['width_banner'] = self.width_banner
        if isinstance(self.auto_reload, int):
            update['auto_reload'] = self.auto_reload
        elif (isinstance(self.auto_reload, str) and self.auto_reload.isdigit()):
            update['auto_reload'] = int(self.auto_reload)
        elif (isinstance(self.auto_reload, unicode) and self.auto_reload.isdigit()):
            update['auto_reload'] = int(self.auto_reload)
        else:
            update['auto_reload'] = 0
        update['html_notification'] = self.html_notification
        update['plase_branch'] = self.plase_branch
        update['retargeting_branch'] = self.retargeting_branch
        if self.cost:
            update['cost'] = self.cost
        if isinstance(self.non_relevant, dict) and 'action' in self.non_relevant and 'userCode' in self.non_relevant:
            update['nonRelevant'] = {'action': self.non_relevant['action'],
                                     'userCode': self.non_relevant['userCode']}
        update['lastModified'] = datetime.datetime.now()

        self.db.informer.update({'guid': self.guid, 'guid_int': long(self.guid_int)},
                                       {'$set': update},
                                       upsert=True,
                                       safe=True)
        InformerFtpUploader(self.guid).upload()
        mq.MQ().informer_update(self.guid)

    def load(self, id):
        raise NotImplementedError

    def loadGuid (self, id):
        """ Загружает информер из MongoDB """
        if id is not None:
            mongo_record = self.db.informer.find_one({'guid': id})
            record = self.db.users.find_one({'login': mongo_record["user"]})
            self.guid = mongo_record['guid']
            self.guid_int = mongo_record['guid_int']
            self.title = mongo_record['title']
            self.user_login = mongo_record["user"]
            self.admaker = mongo_record.get('admaker')
            self.css = mongo_record.get('css')
            self.css_banner = mongo_record.get('css_banner')
            self.domain = mongo_record.get('domain')
            self.cost = mongo_record.get('cost', None)
            self.height = mongo_record.get('height')
            self.width = mongo_record.get('width')
            self.height_banner = mongo_record.get('height_banner')
            self.width_banner = mongo_record.get('width_banner')
            self.range_short_term = float(record.get('range_short_term', (100 / 100.0)))
            self.range_long_term = float(record.get('range_long_term', (0 / 100.0)))
            self.range_context = float(record.get('range_context', (0 / 100.0)))
            self.range_search = float(record.get('range_search', (100 / 100.0)))
            self.range_retargeting = float(record.get('range_retargeting', (100 / 100.0)))
            self.html_notification = bool(mongo_record.get('html_notification', False))
            self.plase_branch = bool(mongo_record.get('plase_branch', True))
            self.retargeting_branch = bool(mongo_record.get('retargeting_branch', True))
            if 'nonRelevant' in mongo_record:
                self.non_relevant = {}
                self.non_relevant['action'] = \
                    mongo_record['nonRelevant'].get('action', 'social')
                self.non_relevant['userCode'] = \
                    mongo_record['nonRelevant'].get('userCode', '')

    @staticmethod
    def load_from_mongo_record(mongo_record):
        """ Загружает информер из записи MongoDB """
        informer = Informer()
        informer.guid = mongo_record['guid']
        informer.guid_int = mongo_record['guid_int']
        informer.title = mongo_record['title']
        informer.user_login = mongo_record["user"]
        db = app_globals.db
        record = db.users.find_one({'login': mongo_record["user"]})
        informer.admaker = mongo_record.get('admaker')
        informer.css = mongo_record.get('css')
        informer.css_banner = mongo_record.get('css_banner')
        informer.domain = mongo_record.get('domain')
        informer.cost = mongo_record.get('cost', None)
        informer.height = mongo_record.get('height')
        informer.width = mongo_record.get('width')
        informer.height_banner = mongo_record.get('height_banner')
        informer.width_banner = mongo_record.get('width_banner')
        informer.range_short_term = float(record.get('range_short_term', (100 / 100.0)))
        informer.range_long_term = float(record.get('range_long_term', (0 / 100.0)))
        informer.range_context = float(record.get('range_context', (0 / 100.0)))
        informer.range_search = float(record.get('range_search', (100 / 100.0)))
        informer.range_retargeting = float(record.get('range_retargeting', (100 / 100.0)))
        informer.html_notification = bool(mongo_record.get('html_notification', False))
        informer.plase_branch = bool(mongo_record.get('plase_branch', True))
        informer.retargeting_branch = bool(mongo_record.get('retargeting_branch', True))
        if 'nonRelevant' in mongo_record:
            informer.non_relevant = {}
            informer.non_relevant['action'] = \
                mongo_record['nonRelevant'].get('action', 'social')
            informer.non_relevant['userCode'] = \
                mongo_record['nonRelevant'].get('userCode', '')
        return informer

    def admaker_options_to_css(self, options):
        """ Создаёт строку CSS из параметров Admaker """

        def parseInt(value):
            ''' Пытается выдрать int из строки.
                
                Например, для "128px" вернёт 128. '''
            try:
                return re.findall("\\d+", value)[0]
            except IndexError:
                return 0
        options = validate_admaker(options)
        template_name = '/advertise_style_template.mako.html'
        src = app_globals.mako_lookup.get_template(template_name)\
                .source.replace('<%text>', '').replace('</%text>', '')
        template = mako.template.Template(
            text=js2mako(src), 
            format_exceptions=True)
        return template.render_unicode(parseInt=parseInt, **options)

    def admaker_options_to_css_banner(self, options):
        """ Создаёт строку CSS Banner из параметров Admaker """

        def parseInt(value):
            ''' Пытается выдрать int из строки.
                
                Например, для "128px" вернёт 128. '''
            try:
                return re.findall("\\d+", value)[0]
            except IndexError:
                return 0

        options = validate_admaker(options)
        template_name = '/advertise_style_template_banner.mako.html'
        src = app_globals.mako_lookup.get_template(template_name)\
                .source.replace('<%text>', '').replace('</%text>', '')
        template = mako.template.Template(
            text=js2mako(src), 
            format_exceptions=True)
        return template.render_unicode(parseInt=parseInt, **options)
#        return minify_css( template.render_unicode(parseInt=h.parseInt, **opt) )

class InformerFtpUploader:
    """ Заливает необходимое для работы информера файлы на сервер раздачи
        статики:

        1. Javascript-загрузчик информера.
        2. Статическую заглушку с социальной рекламой на случай отказа GetMyAd.
    """

    def __init__(self, informer_id):
        self.informer_id = informer_id
        self.db = app_globals.db

    def upload(self):
        """ Заливает через FTP загрузчик и заглушку информера """
        self.upload_loader()
        self.upload_reserve()

    def upload_loader(self):
        ' Заливает загрузчик информера '
        if config.get('informer_loader_ftp'):
            try:
                ftp = FTP(host=config.get('informer_loader_ftp'),
                          user=config.get('informer_loader_ftp_user'),
                          passwd=config.get('informer_loader_ftp_password'))
                ftp.cwd(config.get('informer_loader_ftp_path'))
                loader = StringIO.StringIO()
                loader.write(self._generate_informer_loader_ssl())
                loader.seek(0)
                # TODO: Приведение к UPPER-CASE нужно будет убрать, когда
                #       на сервере будет реализована case-insensitive раздача
                #       статических файлов (задача #58).
                ftp.storlines('STOR %s.js' % self.informer_id.lower(), loader)
                ftp.storlines('STOR %s.js' % self.informer_id.upper(), loader)
                ftp.quit()
                loader.close()
            except Exception, ex:
                logging.error(ex)
        else:
            logging.warning('informer_loader_ftp settings not set! '
                            'Check .ini file.')

    def upload_reserve(self):
        ' Заливает заглушку для информера '
        if config.get('reserve_ftp'):
            try:
                ftp = FTP(config.get('reserve_ftp'))
                ftp.login(config.get('reserve_ftp_user'),
                          config.get('reserve_ftp_password'))
                ftp.cwd(config.get('reserve_ftp_path'))
                data = StringIO.StringIO()
                data.write(self._generate_social_ads().encode('utf-8'))
                data.seek(0)
                ftp.storlines('STOR emergency-%s.html' % self.informer_id,
                              data)
                ftp.quit()
                data.close()
            except Exception, ex:
                logging.error(ex)
        else:
            logging.warning('reserve_ftp settings not set! Check .ini file.')

    def uploadAll(self):
        """ Загружает на FTP скрипты для всех информеров """
        advertises = self.db.informer.find({}, {'guid': 1})
        prog = progressBar(0, advertises.count())
        i = 0
        for adv in advertises:
            i += 1
            prog.updateAmount(i)
            print "Saving informer %s... \t\t\t %s" % (adv['guid'], prog)
            InformerFtpUploader(adv['guid']).upload()

    def _generate_informer_loader_ssl(self):
        ''' Возвращает код javascript-загрузчика информера '''
        adv = self.db.informer.find_one({'guid': self.informer_id})
        if not adv:
            return False
        try:
            guid = adv['guid']
            width = int(re.match('[0-9]+',
                        adv['admaker']['Main']['width']).group(0))
            height = int(re.match('[0-9]+',
                         adv['admaker']['Main']['height']).group(0))
        except:
            raise Exception("Incorrect size dimensions for informer %s" %
                             self.informer_id)
        try:
            border = int(re.match('[0-9]+',
                         adv['admaker']['Main']['borderWidth']).group(0))
        except:
            border = 1
        partner = adv.get('domain', 'other').replace('.', '-').replace('/', '')

        width += border * 2
        height += border * 2
        script = (ur"""
        ;yottos_snowball_cache = typeof yottos_snowball_cache !== 'undefined' ? yottos_snowball_cache : {};
        !function(a){var b=/iPhone/i,c=/iPod/i,d=/iPad/i,e=/(?=.*\bAndroid\b)(?=.*\bMobile\b)/i,f=/Android/i,g=/(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i,h=/(?=.*\bAndroid\b)(?=.*\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\b)/i,i=/IEMobile/i,j=/(?=.*\bWindows\b)(?=.*\bARM\b)/i,k=/BlackBerry/i,l=/BB10/i,m=/Opera Mini/i,n=/(CriOS|Chrome)(?=.*\bMobile\b)/i,o=/(?=.*\bFirefox\b)(?=.*\bMobile\b)/i,p=new RegExp("(?:Nexus 7|BNTV250|Kindle Fire|Silk|GT-P1000)","i"),q=function(a,b){return a.test(b)},r=function(a){var r=a||navigator.userAgent,s=r.split("[FBAN");return"undefined"!=typeof s[1]&&(r=s[0]),this.apple={phone:q(b,r),ipod:q(c,r),tablet:!q(b,r)&&q(d,r),device:q(b,r)||q(c,r)||q(d,r)},this.amazon={phone:q(g,r),tablet:!q(g,r)&&q(h,r),device:q(g,r)||q(h,r)},this.android={phone:q(g,r)||q(e,r),tablet:!q(g,r)&&!q(e,r)&&(q(h,r)||q(f,r)),device:q(g,r)||q(h,r)||q(e,r)||q(f,r)},this.windows={phone:q(i,r),tablet:q(j,r),device:q(i,r)||q(j,r)},this.other={blackberry:q(k,r),blackberry10:q(l,r),opera:q(m,r),firefox:q(o,r),chrome:q(n,r),device:q(k,r)||q(l,r)||q(m,r)||q(o,r)||q(n,r)},this.seven_inch=q(p,r),this.any=this.apple.device||this.android.device||this.windows.device||this.other.device||this.seven_inch,this.phone=this.apple.phone||this.android.phone||this.windows.phone,this.tablet=this.apple.tablet||this.android.tablet||this.windows.tablet,"undefined"==typeof window?this:void 0},s=function(){var a=new r;return a.Class=r,a};"undefined"!=typeof module&&module.exports&&"undefined"==typeof window?module.exports=r:"undefined"!=typeof module&&module.exports&&"undefined"!=typeof window?module.exports=s():"function"==typeof define&&define.amd?define("isMobile",[],a.isMobile=s()):a.isMobile=s()}(this);
        ;function getDevise(){
            var device = "pc";
            if (isMobile.any)
            {
                device = 'oh';
                if (isMobile.apple.device)
                {
                    if(isMobile.apple.phone)
                    {
                        device = 'ap';
                    }
                    else
                    {
                        device = 'at';
                    }
                }
                if (isMobile.android.device)
                {
                    if(isMobile.android.phone)
                    {
                        device = 'np';
                    }
                    else
                    {
                        device = 'nt';
                    }
                }
                if (isMobile.windows.device)
                {
                    if(isMobile.windows.phone)
                    {
                        device = 'wp';
                    }
                    else
                    {
                        device = 'wt';
                    }
                }
            }
            return device
        };
        ;function Test(){
            var test = 'test';
            try {
                JSON.parse("{}");
                localStorage.setItem(test, test);
                localStorage.removeItem(test);
                return 'true';
            } catch(e) {
                return 'false';
            }
        };
        ;function validate(string)
        {
            var utftext = "";
            for (var n = 0; n < string.length; n++) {
                var c = string.charCodeAt(n);
                    if((c > 47) && (c < 58))
                    {
                        utftext += String.fromCharCode(c);
                    }
                    else if ((c > 64) && (c < 91))
                    {
                        utftext += String.fromCharCode(c);
                    }
                    else if ((c > 96) && (c < 123))
                    {
                        utftext += String.fromCharCode(c);
                    }
                    else if ((c > 1039) && (c < 1104))
                    {
                        utftext += String.fromCharCode(c);
                    }
                    else
                    {
                        utftext += String.fromCharCode(32);
                    }
            }
            return utftext;
        }
        ;function getContext(){
            ;function yottos_Snowball(lng) {
                    function Among(s, substring_i, result, method) {
                        this.s_size = s.length;
                        this.s = this.toCharArray(s);
                        this.substring_i = substring_i;
                        this.result = result;
                        this.method = method;
                    }
                    Among.prototype.toCharArray = function(s) {
                        var sLength = s.length, charArr = new Array(sLength);
                        for (var i = 0; i < sLength; i++)
                            charArr[i] = s.charCodeAt(i);
                        return charArr;
                    }
                    function SnowballProgram() {
                        var current;
                        return {
                            b : 0,
                            k : 0,
                            l : 0,
                            c : 0,
                            lb : 0,
                            s_c : function(word) {
                                current = word;
                                this.c = 0;
                                this.l = word.length;
                                this.lb = 0;
                                this.b = this.c;
                                this.k = this.l;
                            },
                            g_c : function() {
                                var result = current;
                                current = null;
                                return result;
                            },
                            i_g : function(s, min, max) {
                                if (this.c < this.l) {
                                    var ch = current.charCodeAt(this.c);
                                    if (ch <= max && ch >= min) {
                                        ch -= min;
                                        if (s[ch >> 3] & (0X1 << (ch & 0X7))) {
                                            this.c++;
                                            return true;
                                        }
                                    }
                                }
                                return false;
                            },
                            i_g_b : function(s, min, max) {
                                if (this.c > this.lb) {
                                    var ch = current.charCodeAt(this.c - 1);
                                    if (ch <= max && ch >= min) {
                                        ch -= min;
                                        if (s[ch >> 3] & (0X1 << (ch & 0X7))) {
                                            this.c--;
                                            return true;
                                        }
                                    }
                                }
                                return false;
                            },
                            o_g : function(s, min, max) {
                                if (this.c < this.l) {
                                    var ch = current.charCodeAt(this.c);
                                    if (ch > max || ch < min) {
                                        this.c++;
                                        return true;
                                    }
                                    ch -= min;
                                    if (!(s[ch >> 3] & (0X1 << (ch & 0X7)))) {
                                        this.c++;
                                        return true;
                                    }
                                }
                                return false;
                            },
                            o_g_b : function(s, min, max) {
                                if (this.c > this.lb) {
                                    var ch = current.charCodeAt(this.c - 1);
                                    if (ch > max || ch < min) {
                                        this.c--;
                                        return true;
                                    }
                                    ch -= min;
                                    if (!(s[ch >> 3] & (0X1 << (ch & 0X7)))) {
                                        this.c--;
                                        return true;
                                    }
                                }
                                return false;
                            },
                            e_s : function(s_size, s) {
                                if (this.l - this.c < s_size)
                                    return false;
                                for (var i = 0; i < s_size; i++)
                                    if (current.charCodeAt(this.c + i) != s.charCodeAt(i))
                                        return false;
                                this.c += s_size;
                                return true;
                            },
                            e_s_b : function(s_size, s) {
                                if (this.c - this.lb < s_size)
                                    return false;
                                for (var i = 0; i < s_size; i++)
                                    if (current.charCodeAt(this.c - s_size + i) != s
                                            .charCodeAt(i))
                                        return false;
                                this.c -= s_size;
                                return true;
                            },
                            f_a : function(v, v_size) {
                                var i = 0, j = v_size, c = this.c, l = this.l, common_i = 0, common_j = 0, first_key_inspected = false;
                                while (true) {
                                    var k = i + ((j - i) >> 1), diff = 0, common = common_i < common_j
                                            ? common_i
                                            : common_j, w = v[k];
                                    for (var i2 = common; i2 < w.s_size; i2++) {
                                        if (c + common == l) {
                                            diff = -1;
                                            break;
                                        }
                                        diff = current.charCodeAt(c + common) - w.s[i2];
                                        if (diff)
                                            break;
                                        common++;
                                    }
                                    if (diff < 0) {
                                        j = k;
                                        common_j = common;
                                    } else {
                                        i = k;
                                        common_i = common;
                                    }
                                    if (j - i <= 1) {
                                        if (i > 0 || j == i || first_key_inspected)
                                            break;
                                        first_key_inspected = true;
                                    }
                                }
                                while (true) {
                                    var w = v[i];
                                    if (common_i >= w.s_size) {
                                        this.c = c + w.s_size;
                                        if (!w.method)
                                            return w.result;
                                        var res = w.method();
                                        this.c = c + w.s_size;
                                        if (res)
                                            return w.result;
                                    }
                                    i = w.substring_i;
                                    if (i < 0)
                                        return 0;
                                }
                            },
                            f_a_b : function(v, v_size) {
                                var i = 0, j = v_size, c = this.c, lb = this.lb, common_i = 0, common_j = 0, first_key_inspected = false;
                                while (true) {
                                    var k = i + ((j - i) >> 1), diff = 0, common = common_i < common_j
                                            ? common_i
                                            : common_j, w = v[k];
                                    for (var i2 = w.s_size - 1 - common; i2 >= 0; i2--) {
                                        if (c - common == lb) {
                                            diff = -1;
                                            break;
                                        }
                                        diff = current.charCodeAt(c - 1 - common) - w.s[i2];
                                        if (diff)
                                            break;
                                        common++;
                                    }
                                    if (diff < 0) {
                                        j = k;
                                        common_j = common;
                                    } else {
                                        i = k;
                                        common_i = common;
                                    }
                                    if (j - i <= 1) {
                                        if (i > 0 || j == i || first_key_inspected)
                                            break;
                                        first_key_inspected = true;
                                    }
                                }
                                while (true) {
                                    var w = v[i];
                                    if (common_i >= w.s_size) {
                                        this.c = c - w.s_size;
                                        if (!w.method)
                                            return w.result;
                                        var res = w.method();
                                        this.c = c - w.s_size;
                                        if (res)
                                            return w.result;
                                    }
                                    i = w.substring_i;
                                    if (i < 0)
                                        return 0;
                                }
                            },
                            r_s : function(c_bra, c_ket, s) {
                                var adjustment = s.length - (c_ket - c_bra), left = current
                                        .substring(0, c_bra), right = current.substring(c_ket);
                                current = left + s + right;
                                this.l += adjustment;
                                if (this.c >= c_ket)
                                    this.c += adjustment;
                                else if (this.c > c_bra)
                                    this.c = c_bra;
                                return adjustment;
                            },
                            s_ch : function() {
                                if (this.b < 0 || this.b > this.k || this.k > this.l
                                        || this.l > current.length)
                                    throw ("faulty slice operation");
                            },
                            s_f : function(s) {
                                this.s_ch();
                                this.r_s(this.b, this.k, s);
                            },
                            s_d : function() {
                                this.s_f("");
                            },
                            i_ : function(c_bra, c_ket, s) {
                                var adjustment = this.r_s(c_bra, c_ket, s);
                                if (c_bra <= this.b)
                                    this.b += adjustment;
                                if (c_bra <= this.k)
                                    this.k += adjustment;
                            },
                            s_t : function() {
                                this.s_ch();
                                return current.substring(this.b, this.k);
                            },
                            e_v_b : function(s) {
                                return this.e_s_b(s.length, s);
                            }
                        };
                    }
                    var stemFactory = {
                        RussianStemmer : function() {
                            var a_0 = [new Among("\u0432", -1, 1),
                                    new Among("\u0438\u0432", 0, 2),
                                    new Among("\u044B\u0432", 0, 2),
                                    new Among("\u0432\u0448\u0438", -1, 1),
                                    new Among("\u0438\u0432\u0448\u0438", 3, 2),
                                    new Among("\u044B\u0432\u0448\u0438", 3, 2),
                                    new Among("\u0432\u0448\u0438\u0441\u044C", -1, 1),
                                    new Among("\u0438\u0432\u0448\u0438\u0441\u044C", 6, 2),
                                    new Among("\u044B\u0432\u0448\u0438\u0441\u044C", 6, 2)], a_1 = [
                                    new Among("\u0435\u0435", -1, 1),
                                    new Among("\u0438\u0435", -1, 1),
                                    new Among("\u043E\u0435", -1, 1),
                                    new Among("\u044B\u0435", -1, 1),
                                    new Among("\u0438\u043C\u0438", -1, 1),
                                    new Among("\u044B\u043C\u0438", -1, 1),
                                    new Among("\u0435\u0439", -1, 1),
                                    new Among("\u0438\u0439", -1, 1),
                                    new Among("\u043E\u0439", -1, 1),
                                    new Among("\u044B\u0439", -1, 1),
                                    new Among("\u0435\u043C", -1, 1),
                                    new Among("\u0438\u043C", -1, 1),
                                    new Among("\u043E\u043C", -1, 1),
                                    new Among("\u044B\u043C", -1, 1),
                                    new Among("\u0435\u0433\u043E", -1, 1),
                                    new Among("\u043E\u0433\u043E", -1, 1),
                                    new Among("\u0435\u043C\u0443", -1, 1),
                                    new Among("\u043E\u043C\u0443", -1, 1),
                                    new Among("\u0438\u0445", -1, 1),
                                    new Among("\u044B\u0445", -1, 1),
                                    new Among("\u0435\u044E", -1, 1),
                                    new Among("\u043E\u044E", -1, 1),
                                    new Among("\u0443\u044E", -1, 1),
                                    new Among("\u044E\u044E", -1, 1),
                                    new Among("\u0430\u044F", -1, 1),
                                    new Among("\u044F\u044F", -1, 1)], a_2 = [
                                    new Among("\u0435\u043C", -1, 1),
                                    new Among("\u043D\u043D", -1, 1),
                                    new Among("\u0432\u0448", -1, 1),
                                    new Among("\u0438\u0432\u0448", 2, 2),
                                    new Among("\u044B\u0432\u0448", 2, 2),
                                    new Among("\u0449", -1, 1),
                                    new Among("\u044E\u0449", 5, 1),
                                    new Among("\u0443\u044E\u0449", 6, 2)], a_3 = [
                                    new Among("\u0441\u044C", -1, 1),
                                    new Among("\u0441\u044F", -1, 1)], a_4 = [
                                    new Among("\u043B\u0430", -1, 1),
                                    new Among("\u0438\u043B\u0430", 0, 2),
                                    new Among("\u044B\u043B\u0430", 0, 2),
                                    new Among("\u043D\u0430", -1, 1),
                                    new Among("\u0435\u043D\u0430", 3, 2),
                                    new Among("\u0435\u0442\u0435", -1, 1),
                                    new Among("\u0438\u0442\u0435", -1, 2),
                                    new Among("\u0439\u0442\u0435", -1, 1),
                                    new Among("\u0435\u0439\u0442\u0435", 7, 2),
                                    new Among("\u0443\u0439\u0442\u0435", 7, 2),
                                    new Among("\u043B\u0438", -1, 1),
                                    new Among("\u0438\u043B\u0438", 10, 2),
                                    new Among("\u044B\u043B\u0438", 10, 2),
                                    new Among("\u0439", -1, 1),
                                    new Among("\u0435\u0439", 13, 2),
                                    new Among("\u0443\u0439", 13, 2),
                                    new Among("\u043B", -1, 1),
                                    new Among("\u0438\u043B", 16, 2),
                                    new Among("\u044B\u043B", 16, 2),
                                    new Among("\u0435\u043C", -1, 1),
                                    new Among("\u0438\u043C", -1, 2),
                                    new Among("\u044B\u043C", -1, 2),
                                    new Among("\u043D", -1, 1),
                                    new Among("\u0435\u043D", 22, 2),
                                    new Among("\u043B\u043E", -1, 1),
                                    new Among("\u0438\u043B\u043E", 24, 2),
                                    new Among("\u044B\u043B\u043E", 24, 2),
                                    new Among("\u043D\u043E", -1, 1),
                                    new Among("\u0435\u043D\u043E", 27, 2),
                                    new Among("\u043D\u043D\u043E", 27, 1),
                                    new Among("\u0435\u0442", -1, 1),
                                    new Among("\u0443\u0435\u0442", 30, 2),
                                    new Among("\u0438\u0442", -1, 2),
                                    new Among("\u044B\u0442", -1, 2),
                                    new Among("\u044E\u0442", -1, 1),
                                    new Among("\u0443\u044E\u0442", 34, 2),
                                    new Among("\u044F\u0442", -1, 2),
                                    new Among("\u043D\u044B", -1, 1),
                                    new Among("\u0435\u043D\u044B", 37, 2),
                                    new Among("\u0442\u044C", -1, 1),
                                    new Among("\u0438\u0442\u044C", 39, 2),
                                    new Among("\u044B\u0442\u044C", 39, 2),
                                    new Among("\u0435\u0448\u044C", -1, 1),
                                    new Among("\u0438\u0448\u044C", -1, 2),
                                    new Among("\u044E", -1, 2),
                                    new Among("\u0443\u044E", 44, 2)], a_5 = [
                                    new Among("\u0430", -1, 1),
                                    new Among("\u0435\u0432", -1, 1),
                                    new Among("\u043E\u0432", -1, 1),
                                    new Among("\u0435", -1, 1),
                                    new Among("\u0438\u0435", 3, 1),
                                    new Among("\u044C\u0435", 3, 1),
                                    new Among("\u0438", -1, 1),
                                    new Among("\u0435\u0438", 6, 1),
                                    new Among("\u0438\u0438", 6, 1),
                                    new Among("\u0430\u043C\u0438", 6, 1),
                                    new Among("\u044F\u043C\u0438", 6, 1),
                                    new Among("\u0438\u044F\u043C\u0438", 10, 1),
                                    new Among("\u0439", -1, 1),
                                    new Among("\u0435\u0439", 12, 1),
                                    new Among("\u0438\u0435\u0439", 13, 1),
                                    new Among("\u0438\u0439", 12, 1),
                                    new Among("\u043E\u0439", 12, 1),
                                    new Among("\u0430\u043C", -1, 1),
                                    new Among("\u0435\u043C", -1, 1),
                                    new Among("\u0438\u0435\u043C", 18, 1),
                                    new Among("\u043E\u043C", -1, 1),
                                    new Among("\u044F\u043C", -1, 1),
                                    new Among("\u0438\u044F\u043C", 21, 1),
                                    new Among("\u043E", -1, 1), new Among("\u0443", -1, 1),
                                    new Among("\u0430\u0445", -1, 1),
                                    new Among("\u044F\u0445", -1, 1),
                                    new Among("\u0438\u044F\u0445", 26, 1),
                                    new Among("\u044B", -1, 1), new Among("\u044C", -1, 1),
                                    new Among("\u044E", -1, 1),
                                    new Among("\u0438\u044E", 30, 1),
                                    new Among("\u044C\u044E", 30, 1),
                                    new Among("\u044F", -1, 1),
                                    new Among("\u0438\u044F", 33, 1),
                                    new Among("\u044C\u044F", 33, 1)], a_6 = [
                                    new Among("\u043E\u0441\u0442", -1, 1),
                                    new Among("\u043E\u0441\u0442\u044C", -1, 1)], a_7 = [
                                    new Among("\u0435\u0439\u0448\u0435", -1, 1),
                                    new Among("\u043D", -1, 2),
                                    new Among("\u0435\u0439\u0448", -1, 1),
                                    new Among("\u044C", -1, 3)], g_v = [33, 65, 8, 232], I_p2, I_pV, sbp = new SnowballProgram();
                            this.setCurrent = function(word) {
                                sbp.s_c(word);
                            };
                            this.getCurrent = function() {
                                return sbp.g_c();
                            };
                            function habr3() {
                                while (!sbp.i_g(g_v, 1072, 1103)) {
                                    if (sbp.c >= sbp.l)
                                        return false;
                                    sbp.c++;
                                }
                                return true;
                            }
                            function habr4() {
                                while (!sbp.o_g(g_v, 1072, 1103)) {
                                    if (sbp.c >= sbp.l)
                                        return false;
                                    sbp.c++;
                                }
                                return true;
                            }
                            function r_mark_regions() {
                                I_pV = sbp.l;
                                I_p2 = I_pV;
                                if (habr3()) {
                                    I_pV = sbp.c;
                                    if (habr4())
                                        if (habr3())
                                            if (habr4())
                                                I_p2 = sbp.c;
                                }
                            }
                            function r_R2() {
                                return I_p2 <= sbp.c;
                            }
                            function habr2(a, n) {
                                var a_v, v_1;
                                sbp.k = sbp.c;
                                a_v = sbp.f_a_b(a, n);
                                if (a_v) {
                                    sbp.b = sbp.c;
                                    switch (a_v) {
                                        case 1 :
                                            v_1 = sbp.l - sbp.c;
                                            if (!sbp.e_s_b(1, "\u0430")) {
                                                sbp.c = sbp.l - v_1;
                                                if (!sbp.e_s_b(1, "\u044F"))
                                                    return false;
                                            }
                                        case 2 :
                                            sbp.s_d();
                                            break;
                                    }
                                    return true;
                                }
                                return false;
                            }
                            function r_perfective_gerund() {
                                return habr2(a_0, 9);
                            }
                            function habr1(a, n) {
                                var a_v;
                                sbp.k = sbp.c;
                                a_v = sbp.f_a_b(a, n);
                                if (a_v) {
                                    sbp.b = sbp.c;
                                    if (a_v == 1)
                                        sbp.s_d();
                                    return true;
                                }
                                return false;
                            }
                            function r_adjective() {
                                return habr1(a_1, 26);
                            }
                            function r_adjectival() {
                                var a_v;
                                if (r_adjective()) {
                                    habr2(a_2, 8);
                                    return true;
                                }
                                return false;
                            }
                            function r_reflexive() {
                                return habr1(a_3, 2);
                            }
                            function r_verb() {
                                return habr2(a_4, 46);
                            }
                            function r_noun() {
                                habr1(a_5, 36);
                            }
                            function r_derivational() {
                                var a_v;
                                sbp.k = sbp.c;
                                a_v = sbp.f_a_b(a_6, 2);
                                if (a_v) {
                                    sbp.b = sbp.c;
                                    if (r_R2() && a_v == 1)
                                        sbp.s_d();
                                }
                            }
                            function r_tidy_up() {
                                var a_v;
                                sbp.k = sbp.c;
                                a_v = sbp.f_a_b(a_7, 4);
                                if (a_v) {
                                    sbp.b = sbp.c;
                                    switch (a_v) {
                                        case 1 :
                                            sbp.s_d();
                                            sbp.k = sbp.c;
                                            if (!sbp.e_s_b(1, "\u043D"))
                                                break;
                                            sbp.b = sbp.c;
                                        case 2 :
                                            if (!sbp.e_s_b(1, "\u043D"))
                                                break;
                                        case 3 :
                                            sbp.s_d();
                                            break;
                                    }
                                }
                            }
                            this.stem = function() {
                                r_mark_regions();
                                sbp.c = sbp.l;
                                if (sbp.c < I_pV)
                                    return false;
                                sbp.lb = I_pV;
                                if (!r_perfective_gerund()) {
                                    sbp.c = sbp.l;
                                    if (!r_reflexive())
                                        sbp.c = sbp.l;
                                    if (!r_adjectival()) {
                                        sbp.c = sbp.l;
                                        if (!r_verb()) {
                                            sbp.c = sbp.l;
                                            r_noun();
                                        }
                                    }
                                }
                                sbp.c = sbp.l;
                                sbp.k = sbp.c;
                                if (sbp.e_s_b(1, "\u0438")) {
                                    sbp.b = sbp.c;
                                    sbp.s_d();
                                } else
                                    sbp.c = sbp.l;
                                r_derivational();
                                sbp.c = sbp.l;
                                r_tidy_up();
                                return true;
                            }
                        }}
                    var stemName = lng.substring(0, 1).toUpperCase()
                            + lng.substring(1).toLowerCase() + "Stemmer";
                    return new stemFactory[stemName]();
            }   
            ;var yottos_Stem = function(lng) {
                var yottos_testStemmer = new yottos_Snowball(lng);
                return function(word) {
                  yottos_testStemmer.setCurrent(word);
                  yottos_testStemmer.stem();
                  return yottos_testStemmer.getCurrent();
                }
            };
            ;function yottos_stremer(word){
                if (yottos_snowball_cache[word]){
                    w = yottos_snowball_cache[word];
                }
                else{
                    w = new yottos_Stem('russian')(word);
                    yottos_snowball_cache[word] = w;
                }
                return w;
            }; 
            function getText(){
                var result = '';
                result += (document.title.replace(/[^a-zA-Zа-яА-Я]/g,' ').replace(/\s+$/g,'').replace(/^\s+/g,'').replace(/[\n\t\r\f\s]{2,}/g,' '));
                var metas = document.getElementsByTagName('meta');
                if (metas) {
                    for (var x=0,y=metas.length; x<y; x++) {
                        if (metas[x].name.toLowerCase() == "description") {
                            result += ' ';
                            result += (metas[x].content.replace(/[^a-zA-Zа-яА-Я]/g,' ').replace(/\s+$/g,'').replace(/^\s+/g,'').replace(/[\n\t\r\f\s]{2,}/g,' ')) + ' ';
                        }
                        if (metas[x].name.toLowerCase() == "keywords") {
                            result += ' ';
                            result += (metas[x].content.replace(/[^a-zA-Zа-яА-Я]/g,' ').replace(/\s+$/g,'').replace(/^\s+/g,'').replace(/[\n\t\r\f\s]{2,}/g,' ')) + ' ';
                        }
                    }
                }
               return result;
            }
            var yottos_splitted = getText().toLowerCase().split(' ');
            var yottos_collector = {};
            var yottos_counter = {};
            var yottos_ignore = ['бол','больш','будет','будут','как','пок','коментар','будт','был','быт','вдруг','вед','впроч','всегд','всег','всех',
            'говор','главн','даж','друг','дальш','добав','есл','ест','жизн','зач','зде','иногд','кажет','кажд','как','когд','конечн','котор','куд',
            'лучш','либ','межд','мен','долж','смысл','след','чита','люб','постара','помим','числ','соб','ждат','част','использ','велик','член','некотор',
            'мног','может','можн','наконец','нег','нельз','нибуд','никогд','нич','один','опя','опубликова','перед','посл','пот','почт','разв','сво',
            'себ','сегодн','сейчас','сказа','совс','так','теб','тепер','тогд','тог','тож','тольк','хорош','хот','чег','человек','пут','вполн','возможн',
            'через','чтоб','чут','эт','позж','все','поэт','точн','этот','над','итог','недел','сведен','тем','город','гроз','зон','принят','балл','перв',
            'вход','лент','оста','мир','образ','идет','выйт','нол','сил','наш','мнен','одн','ищ','выш','взял','откр','нов','удив','всем','важн','ожида',
            'сам','ход','пущ','тег','выж','комментар','ваш','цен','коснут','слаб','ситуац','назов','уход','дол','основн','ряд','заверш','дополнен','влия',
            'описа','меньш','двум','слаб','стал','новост','отраз','вопрос','выбор','сдела','смерт','последн','поворот','высок','опозор','текст',
            'назов','основн','причин','групп','похож','with','that','this','about','above','after','again','against','because','been','before','being',
            'below','between','both','cannot','could','does','down','than','that','important','partner','border','link','text','radius','none','document',
            'height','color','title','normal','font','down','display','width','block','margin','yandex','item','type','left','padding','auto','inner',
            'function','decorati','google','position','http','align','webkit','inherit','direct','hover','referrer','write','size','math','spacing',
            'line','sizing','float','bottom','vert','charset','vertical','background','underline','visited','inline','unescape','value','style','visible',
            'address','else','true','tail','iframe','adriver','white','space','collapse','content','list','window','absolute','script','random','transparent',
            'repeat','scroll','container','piclayout','email','site','form','location','place','table','show','indent','visibility','clickable','last',
            'agewarn','opts','toggler','errormsg','getcode','href','relative','overflow','clear','cursor','outline','index','full','baseline','hide',
            'focus','catch','async','https','escape','round','target','blank','frameborder','scrolling','click','hidden','empty','cells','letter','static',
            'layout','transform','word','right','weight','warn','active','used','context','undefined','counter','page','mail','body','domain','region',
            'pointer','nowrap','family','first','data','online','push','metrika','callbacks','image','classname','protocol','init','icon','wrap','root',
            'solid','facebook','options','defaults','offset','false','return','like','opera','frames','typeof','decoration'];
                yottos_ignore = (function(){
                    var yottos_o = {};
                    var yottos_iCount = yottos_ignore.length;
                    for (var i=0;i<yottos_iCount;i++){
                        yottos_o[yottos_ignore[i]] = true;
                    }
                    return yottos_o;
                }());
                for (i = 0; i < yottos_splitted.length; i++) {
                   var yottos_key = yottos_splitted[i].replace(/^\s*/, "").replace(/\s*$/, "");
                   if (yottos_key.length > 3){
                        var yottos_streem_key = yottos_stremer(yottos_key);
                        if (!yottos_ignore[yottos_streem_key]) {
                            yottos_collector[yottos_streem_key] = yottos_key;
                            yottos_counter[yottos_streem_key] = yottos_counter[yottos_streem_key] || 0;
                            yottos_counter[yottos_streem_key]++;
                        }
                    }
                }
                var yottos_arr = [];
                for (yottos_sWord in yottos_counter) {
                    if (yottos_counter[yottos_sWord] > 1){
                        yottos_arr.push({
                        text: yottos_collector[yottos_sWord],
                        streem:yottos_sWord,
                        frequency: yottos_counter[yottos_sWord]
                        });
                    }
                }
                var yottos_sort_arr = yottos_arr.sort(function(a,b){return (a.frequency > b.frequency) ? -1 : ((a.frequency < b.frequency) ? 1 : 0);});
                var yottos_out = [];
                for (var i=0; i<yottos_sort_arr.length; i++) {
                    yottos_out.push(yottos_sort_arr[i].text);
                }

                ;var yottos_out_length = 0;
                ;var yottos_output = [];
                for (var i=0; i<yottos_out.length; i++)
                {
                    yottos_out_length += yottos_out[i].length;
                    if (navigator.appName == 'Microsoft Internet Explorer'){
                        if (yottos_out_length < 200) {
                            yottos_output.push(yottos_out[i]);
                        }
                    }
                    else{
                        if (yottos_out_length < 1000) {
                            yottos_output.push(yottos_out[i]);
                        }
                    }
                }
            return (yottos_output.join(' '));
        }
        ;function yottos_getSearch(){
            ;var result = "";
            ;var search_engines=[ 
                {"name":"Mail", "pattern":"go.mail.ru", "param":"q"}, 
                {"name":"Google", "pattern":"google.", "param":"q"}, 
                {"name":"Google", "pattern":"google.", "param":"as_q"}, 
                {"name":"Live Search", "pattern":"search.live.com", "param":"q"}, 
                {"name":"Bing", "pattern":"bing", "param":"q"}, 
                {"name":"Rambler", "pattern":"rambler.ru", "param":"query"}, 
                {"name":"Rambler", "pattern":"rambler.ru", "param":"words"}, 
                {"name":"Yahoo!", "pattern":"search.yahoo.com", "param":"p"}, 
                {"name":"Nigma", "pattern":"nigma.ru", "param":"s"}, 
                {"name":"Nigma", "pattern":"nigma.ru", "param":"q"}, 
                {"name":"MSN", "pattern":"search.msn.com", "param":"q"}, 
                {"name":"Ask", "pattern":"ask.com", "param":"q"}, 
                {"name":"QIP", "pattern":"search.qip.ru", "param":"query"}, 
                {"name":"RapidAll", "pattern":"rapidall.com", "param":"keyword"}, 
                {"name":"Яндекс.Картинки", "pattern":"images.yandex", "param":"text"}, 
                {"name":"Яндекс.Mobile", "pattern":"m.yandex", "param":"query"}, 
                {"name":"Яндекс", "pattern":"hghltd.yandex", "param":"text"}, 
                {"name":"Яндекс", "pattern":"yandex", "param":"text"},
                {"name":"УкрНет", "pattern":"ukr.net", "param":"q"},
                {"name":"УкрНет", "pattern":"ukr.net", "param":"q"},
                {"name":"meta", "pattern":"meta.ua", "param":"q"},
                {"name":"findes", "pattern":"findes.com.ua", "param":"q"}, 
                {"name":"webalta", "pattern":"webalta", "param":"q"}, 
                {"name":"bigmir", "pattern":"bigmir.net", "param":"z"}, 
                {"name":"i.ua", "pattern":"i.ua", "param":"q"}, 
                {"name":"online.ua", "pattern":"online.ua", "param":"q"}, 
                {"name":"liveinternet.ru", "pattern":"liveinternet.ru", "param":"q"}, 
                {"name":"all.by", "pattern":"all.by", "param":"query"}
            ];
            var parser = document.createElement('a');
            parser.href = document.referrer;
            for (var i=0; i<search_engines.length; i++)
            {
                if (-1 < parser.hostname.indexOf(search_engines[i]['pattern']))
                {
                    var param = parser.search.replace(new RegExp("\\?",'g'),"").split('&');
                    for (var y=0; y<param.length; y++)
                    {
                        if (param[y].split('=')[0] == search_engines[i]['param'])
                        {
                            result = decodeURIComponent(param[y].split('=')[1]);
                        }
                    }
                }
            }
            return result;
        }""" + u"""
        ;var yottos_isElementInViewport =  function(el,scrollCounter, c) {
              var top = el.offsetTop ; 
              var left = el.offsetLeft ; 
              var width = el.offsetWidth ; 
              var height = el.offsetHeight ; 
              var pageYOffset;
              var pageXOffset;
              var YOffset = 0;
              var XOffset = 0;
              var innerWidth;
              var innerHeight;
                if (typeof window.innerWidth != 'undefined')
                {
                    innerWidth = window.innerWidth;
                    innerHeight = window.innerHeight;
                }
                else if (typeof document.documentElement != 'undefined' && typeof document.documentElement.clientWidth != 'undefined' && document.documentElement.clientWidth != 0)
                {
                    innerWidth = document.documentElement.clientWidth;
                    innerHeight = document.documentElement.clientHeight;
                }
                else
                {
                    innerWidth = document.getElementsByTagName('body')[0].clientWidth;
                    innerHeight = document.getElementsByTagName('body')[0].clientHeight;
                }
              if(typeof window.pageYOffset!= 'undefined'){
                    pageYOffset = window.pageYOffset;
                    pageXOffset = window.pageXOffset;
              }
              else
              {
                    pageYOffset = document.documentElement.scrollTop;
                    pageXOffset = document.documentElement.scrollLeft;
              } 
              while ( el.offsetParent )  { 
                el = el.offsetParent ; 
                top += el.offsetTop ; 
                left += el.offsetLeft ; 
              }
              if (scrollCounter > 1)
                {
                   YOffset = (pageYOffset/scrollCounter) * c;
                   XOffset = (pageXOffset/scrollCounter) * c; 
                }
              return  ( 
                top <  ( pageYOffset + innerHeight + YOffset )  && 
                left <  ( pageXOffset+ innerWidth + XOffset )  && 
                ( top + height ) > pageYOffset && 
                ( left + width ) > pageXOffset
               );
            };
        ;var yottos_onVisibility = function(el, callback, c) {
            var old_visible = false;
            var scrollCounter = 0;
            return function () {
                if (!old_visible)
                {
                    var visible = yottos_isElementInViewport(el,scrollCounter,c)
                    scrollCounter++;
                    if (visible != old_visible) {
                        old_visible = visible;
                        render = true;
                        if (typeof callback == 'function') {
                            callback();
                        }
                    }
                }
            }
        };
        ;function yottos_windowWidth(){
            var windowWidth = 0;
            if (window.self.innerWidth)
                windowWidth = window.self.innerWidth;
            else if (window.document.documentElement && window.document.documentElement.clientWidth)
                windowWidth = window.document.documentElement.clientWidth;
            else if (window.document.body)
                windowWidth = window.document.body.clientWidth;
            return windowWidth;
        }
        ;function yottos_windowHeight(){
            var windowHeight = 0;
            if (window.self.innerHeight)
                windowHeight = window.self.innerHeight;
            else if (window.document.documentElement && window.document.documentElement.clientHeight)
                windowHeight = window.document.documentElement.clientHeight;
            else if (window.document.body)
                windowHeight = window.document.body.clientHeight;
            return windowHeight;
        }
        ;var rand = Math.floor(Math.random() * 1000000);
        ;var iframe_id = 'yottos' + rand;
        try {
            ;var el = document.createElement('<iframe name='+ iframe_id +'>');
        } catch (ex) {
            ;var el = document.createElement("iframe");
            ;el.name = iframe_id;
        }
        ;var randParam = '';
        if (Test() != 'true')
        { 
            randParam = '&rand=' + rand;
        }
        ;var elf = document.createElement("form");
        ;el.id = iframe_id;
        ;elf.id = "f" + iframe_id;
        ;elf.name = "f" + iframe_id;
        ;elf.target = iframe_id;
        ;elf.method = "POST";
        ;el.style.width = '%(width)spx';
        ;el.marginHeight = '0px';
        ;el.marginWidth = '0px';
        ;el.style.height = '%(height)spx';
        ;elf.style.width = '0px';
        ;elf.style.height = '0px';
        ;elf.style.border = '0px';
        ;el.style.border = '0px';
        ;el.scrolling='no';
        ;el.frameBorder='0';
        ;el.allowtransparency='true';
        
        ;function yottos_iframe_query(){
            return "?scr=%(guid)s&location=" + encodeURIComponent(window.location.href) + "&w=" + yottos_windowWidth() + "&h=" + yottos_windowHeight() + "&device=" + getDevise() + randParam ;
        }
        var yt_temp_adv_name = '%(guid)s'.replace(/-/g, '');
        var name_el = window[yt_temp_adv_name].shift();

        ;elf.action = 'https://rg.yottos.com/block' + yottos_iframe_query();
        ;function formRemove(iframe, elf)
        {
            if (iframe.attachEvent)
            {
                iframe.attachEvent("onload", function(){
                    console.log("remove",elf);
                    ;elf.parentNode.removeChild(elf);
                });
            }
            else
            {
                iframe.onload = function(){
                    console.log("remove",elf);
                    ;elf.parentNode.removeChild(elf);
                };
            }

        };
        ;var yottos_render = function(name_el, elf, el)
        {
           return function()
           {
            var div_el = document.getElementById(name_el);
            if (div_el != null){
                ;div_el.appendChild(elf);
                ;div_el.appendChild(el);
                ;var handler = yottos_onVisibility(el, function() {
                        ;document.forms[elf.id].submit();
                        console.log("render",name_el);
                        ;var frame_el = document.getElementById(el.id);
                        ;formRemove(frame_el, elf);
                }, 15);
                ;handler();
                if (window.addEventListener) {
                    addEventListener('scroll', handler, false); 
                    addEventListener('resize', handler, false); 
                } else if (window.attachEvent)  {
                    attachEvent('onscroll', handler);
                    attachEvent('onresize', handler);
                }
            }
            }();
        };
        console.log("processing",name_el);
        if (document.getElementById(name_el) != null){
            console.log("processing in strim",name_el);
            yottos_render(name_el, elf, el);
        }
        else{
            console.log("processing onload",name_el);
            window.onload = function() { 
                console.log("onload" + name_el);
                yottos_render(name_el, elf, el);
            };
        }
        """) % {'partner':partner, 'guid':guid, 'width':width, 'height':height}
        
        #return """//<![CDATA[\n""" +  minifier.minify(script.encode('utf-8') , mangle=False) + """\n//]]>"""
        #return """//<![CDATA[\n""" + script.encode('utf-8') + """\n//]]>"""
        return script.encode('utf-8')



    def _generate_social_ads(self):
        ''' Возвращает HTML-код заглушки с социальной рекламой,
            которая будет показана при падении сервиса
        '''
        inf = self.db.informer.find_one({'guid': self.informer_id})
        if not inf:
            return

        try:
            items_count = int(inf['admaker']['Main']['itemsNumber'])
        except:
            items_count = 0

        offers = ''
        for i in xrange(0, items_count):
            adv = social_ads[i % len(social_ads)]

            offers += ('''<div class="advBlock"><a class="advHeader" href="%(url)s" target="_blank">''' +
                       '''%(title)s</a><a class="advDescription" href="%(url)s" target="_blank">''' +
                       '''%(description)s</a><a class="advCost" href="%(url)s" target="_blank"></a>''' +
                       '''<a href="%(url)s" target="_blank"><img class="advImage" src="%(img)s" alt="%(title)s"/></a></div>'''
                       ) % {'url': adv['url'], 'title': adv['title'], 'description': adv['description'], 'img': adv['image']}
        return '''
<html><head><META http-equiv="Content-Type" content="text/html; charset=utf-8"><meta name="robots" content="nofollow" /><style type="text/css">html, body { padding: 0; margin: 0; border: 0; }</style><!--[if lte IE 6]><script type="text/javascript" src="//cdn.yottos.com/getmyad/supersleight-min.js"></script><![endif]-->
%(css)s
</head>
<body>
<div id='mainContainer'><div id="ads" style="position: absolute; left:0; top: 0">
%(offers)s
</div><div id='adInfo'><a href="https://yottos.com" target="_blank"></a></div>
</body>
</html>''' % {'css': inf.get('css'), 'offers': offers}





def minify_css(css):
    # remove comments - this will break a lot of hacks :-P
    css = re.sub( r'\s*/\*\s*\*/', "$$HACK1$$", css ) # preserve IE<6 comment hack
    css = re.sub( r'/\*[\s\S]*?\*/', "", css )
    css = css.replace( "$$HACK1$$", '/**/' ) # preserve IE<6 comment hack
    
    # url() doesn't need quotes
    css = re.sub( r'url\((["\'])([^)]*)\1\)', r'url(\2)', css )
    
    # spaces may be safely collapsed as generated content will collapse them anyway
    css = re.sub( r'\s+', ' ', css )
    
    # shorten collapsable colors: #aabbcc to #abc
    css = re.sub( r'#([0-9a-f])\1([0-9a-f])\2([0-9a-f])\3(\s|;)', r'#\1\2\3\4', css )
    
    # fragment values can loose zeros
    css = re.sub( r':\s*0(\.\d+([cm]m|e[mx]|in|p[ctx]))\s*;', r':\1;', css )
    
    result = []
    for rule in re.findall( r'([^{]+){([^}]*)}', css ):
    
        # we don't need spaces around operators
        selectors = [re.sub( r'(?<=[\[\(>+=])\s+|\s+(?=[=~^$*|>+\]\)])', r'', selector.strip() ) for selector in rule[0].split( ',' )]
    
        # order is important, but we still want to discard repetitions
        properties = {}
        porder = []
        for prop in re.findall( '(.*?):(.*?)(;|$)', rule[1] ):
            key = prop[0].strip().lower()
            if key not in porder: porder.append( key )
            properties[ key ] = prop[1].strip()
    
        # output rule if it contains any declarations
        if properties:
            result.append( "%s{%s}" % ( ','.join( selectors ), ''.join(['%s:%s;' % (key, properties[key]) for key in porder])[:-1] ))
    return "\n".join(result)



class InformerPattern:
    """ Рекламный информер (он же рекламный скрипт, рекламная выгрузка) """

    def __init__(self):
        self.guid = None
        self.admaker = None
        self.db = app_globals.db


    def save(self):
        """ Сохраняет информер, при необходимости создаёт """
        update = {}
        if self.guid:
            pass
        else:
            self.guid = str(uuid1()).lower()
            
        if self.admaker:
            update['admaker'] = self.admaker

        self.db.informer.patterns.update({'guid': self.guid},
                                       {'$set': update},
                                       upsert=True,
                                       safe=True)

    def load(self, id):
        raise NotImplementedError

    def loadGuid (self, id):
        """ Загружает информер из MongoDB """
        mongo_record = self.db.informer.patterns.find_one({'guid': id})
        self.guid = mongo_record['guid']
        self.guid_int = mongo_record['guid_int']
        self.title = mongo_record['title']
        self.user_login = mongo_record["user"]
        self.admaker = mongo_record.get('admaker')
        self.height = mongo_record.get('height')
        self.width = mongo_record.get('width')
        self.height_banner = mongo_record.get('height_banner')
        self.width_banner = mongo_record.get('width_banner')

    @staticmethod
    def load_from_mongo_record(mongo_record):
        """ Загружает информер из записи MongoDB """
        informer = InformerPattern()
        informer.guid = mongo_record['guid']
        informer.title = mongo_record['title']
        db = app_globals.db
        informer.admaker = mongo_record.get('admaker')
        informer.height = mongo_record.get('height')
        informer.width = mongo_record.get('width')
        informer.height_banner = mongo_record.get('height_banner')
        informer.width_banner = mongo_record.get('width_banner')
        return informer
